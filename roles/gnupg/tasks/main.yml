# code: language=ansible
---
- name: Setup {{ app }}
  vars:
    app: "gnupg"
    config_path: "{{ (ansible_env.HOME, '.gnupg') | path_join }}"
    packages:
      MacOSX:
        - { name: "gnupg" }
        - { name: "pinentry-mac" }
      Ubuntu:
        - { name: "gnupg" }
        - { name: "gnupg2" }
    scripts:
      headers: "{{ gnupg_block_header_result.stdout }}"
      MacOSX: |
        export GPG_TTY=$(tty)
        gpg-connect-agent /bye
  block:
    - name: Install {{ app }}
      become: "{{ not is_mac | bool }}"
      ansible.builtin.package:
        name: "{{ package_item.name }}"
        state: "{{ package_item.state | default(omit) }}"
      loop: "{{ packages[ansible_distribution] }}"
      loop_control:
        loop_var: package_item

    - name: Ensure config directory exists
      become: false
      ansible.builtin.file:
        path: "{{ config_path }}"
        state: directory
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"
        mode: "0700"
        modification_time: preserve
        access_time: preserve

    - name: Create file block header
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          figlet -f {{ figlet_font }} '{{ app }}' | boxes -d {{ boxes_design }}
        executable: /bin/bash
      register: gnupg_block_header_result
      changed_when: gnupg_block_header_result.rc != 0

    - name: Configure shell scripts
      when: scripts[ansible_distribution] is defined
      ansible.builtin.blockinfile:
        state: present
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ app }}"
        dest: "{{ file_item.name }}"
        backup: true
        block: |
          {{ scripts.headers }}
          {{ scripts[ansible_distribution] }}
        prepend_newline: true
      loop:
        - { name: "{{ file_zshrc }}" }
        - { name: "{{ file_bashrc }}" }
      loop_control:
        loop_var: file_item

    - name: Configure gpg config (Mac)
      when: is_mac
      become: false
      ansible.builtin.lineinfile:
        path: "{{ (config_path, 'gpg.conf') | path_join }}"
        line: "use-agent"
        create: true
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"
        mode: "0600"
        backup: true

    - name: Configure gpg agent (Mac)
      when: is_mac
      ansible.builtin.blockinfile:
        state: "{{ file_item.state | default(omit) }}"
        create: true
        mode: "600"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ app }}"
        dest: "{{ file_item.name }}"
        backup: true
        block: |
          {{ scripts.headers }}
          pinentry-program {{ (ansible_env.HOMEBREW_PREFIX, 'bin', 'pinentry-mac') | path_join }}
        prepend_newline: true
      loop:
        - { name: "{{ (config_path, 'gpg-agent.conf') | path_join }}" }
      loop_control:
        loop_var: file_item

    - name: Create symbolic link to host gpg.exe (WSL2)
      when: is_wsl
      become: true
      ansible.builtin.file:
        src: "/mnt/c/Program Files (x86)/GnuPG/bin/gpg.exe"
        dest: "/usr/local/bin/gpg"
        mode: "555"
        state: link

    - name: Configure gpg agent to host (WSL2)
      when: is_wsl
      ansible.builtin.blockinfile:
        state: "{{ file_item.state | default(omit) }}"
        create: true
        mode: "600"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ app }}"
        dest: "{{ file_item.name }}"
        backup: true
        block: |
          {{ scripts.headers }}
          pinentry-program "/mnt/c/Program Files (x86)/GnuPG/bin/pinentry-basic.exe"
        prepend_newline: true
      loop:
        - { name: "{{ (config_path, 'gpg-agent.conf') | path_join }}" }
      loop_control:
        loop_var: file_item
